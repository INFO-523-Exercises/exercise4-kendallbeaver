---
title: "homework4"
format: html
editor: visual
---

### Intro

### Outline

-   Chosen Dataset & its Features/Characteristics

-   Multi Linear Regression Methods

-   Multi-dimensional Linear Regression Methods

-   Assessment/Conclusion

### Chosen Dataset & its Features/Characteristics

```{r}

#################
# Load packages
#################

install.packages("ggplot2", repos = "http://cran.r-project.org")
install.packages("DescTools", repos = "http://cran.r-project.org")
install.packages("gridExtra", repos = "http://cran.r-project.org")
install.packages("tune", repos = "http://cran.r-project.org")

pacman::p_load(dlookr,
               tidyverse,
               here,
               formattable,
               knitr,
               dplyr)

library(ggplot2)
library(tibble)
library(rsample)
library(parsnip)
library(dplyr)
library(Metrics)
library(caret)
library(DescTools)
library(gridExtra)
library(recipes)
library(magrittr)
library(here)
```

```{r}
##################################
# Load & analyze "Cage Free" data
##################################

# Original dimensions of dataset: 96 rows x 4 columns
original_data <- read_csv(here('./data/cage-free-percentages.csv'), col_types = cols(observed_month = col_date(),
  percent_hens = col_double(),
  percent_eggs = col_double(),
  observed_month = col_date()
))

# Removing unncessary "source" column
cage_free <- original_data %>% select(-source)

# Timespan of data: Over 13 yrs worth of data
cage_free |> summary()

# Presentable view of dataset
cage_free |> formattable()

#Summary: Data is limited; numbers are percentages and missing values.
```

```{r}
######################################
# Load & analyze "Egg Production" data
######################################

# Original dimensions of dataset: 220 rows x 6 columns
original_egg_prod_data <- read_csv(here('./data/egg-production.csv'), col_types = cols(observed_month = col_date(),
  prod_type = col_factor(),
  prod_process = col_factor(),
  n_hens = col_double(),
  n_eggs = col_double()
))

# Removing unncessary "source" column
egg_prod <- original_egg_prod_data %>% select(-source)
#egg_prod

# Timespan of data: Over 13 yrs worth of data
egg_prod |> summary()

# Presentable view of dataset
egg_prod |> 
  filter() |>
  formattable()

# "Hatching eggs" will impede production, so filtering for "table eggs" 
filtered_eggs_prod <- egg_prod %>%
  filter(prod_type %in% "table eggs") %>%
  filter(prod_process %in% "all")

# "Table eggs" dataset from 7/31/16 - 1/31/21
filtered_eggs_prod |> formattable()
```

```{r}
################################################################
# Scatter Plot, Plot of Original Function & Calc. of Lin. Funct.
################################################################

# Create short-hand notaion of X- & y-axis
X <- filtered_eggs_prod$n_hens
y <- filtered_eggs_prod$n_eggs
y_true <- (-5.828*10^8) + 26.24*X

# Create Scatter Plot of Data
plot(X, y,
     xlab = "No. of Hens", 
     ylab = "No. of Eggs",
     main = "Scatter Plot of 'Table Egg' Production (July 2016 - Jan 2021)")

# Find the linear function of data for the following plot
linear_model <- lm(n_eggs ~ n_hens, data = filtered_eggs_prod)
summary(linear_model)

# True function: y=(−5.828×10^8 +26.24×)

# Plot of Linear Function for Data
ggplot() +
  geom_point(aes(x=X, y=y), color="black") +
  geom_line(aes(x=X, y=y_true), color="blue", linewidth=1) +
  ggtitle('Plot of Original Function: y = (-5.828 * 10^8) + 26.24 * X') +
  xlab('X = No. of Hens') +
  ylab('y = No. of Eggs')
```

```{r}
##################################
# Create my Train & Test Datasets
##################################

# Train/test split

numTrain <- 20
numTest <- numInstances - numTrain

# For reproducibility

set.seed(123)

# Create new data table

data <- tibble(X = X, y = y)

split_obj <- initial_split(data, prop = numTrain/numInstances)

# Extract train and test data
train_data <- training(split_obj)
test_data <- testing(split_obj)

# Extract X_train, X_test, y_train, y_test
X_train <- train_data$X
y_train <- train_data$y

X_test <- test_data$X
y_test <- test_data$y
```

```{r}

######################################
# Fit Regression Model to Training Set
######################################

# Create a linear regression model specification
lin_reg_spec <- linear_reg() |> 
  set_engine("lm")

# Fit the model to the training data

lin_reg_fit <- lm(y ~ X, data = filtered_eggs_prod)

# This is causing problems so I substituted with the above.  
# lin_reg_fit <- lin_reg_spec |> 
#   fit(y ~ X, data = train_data)
```

```{r}
##############################
# Apply model to the test set
##############################

y_pred_test <- predict(lin_reg_fit, new_data = test_data) 

# The "pull" method was causing problems above so I removed this method to get this chunk working. 
# ... |> pull(.pred)

y_pred_test
```

```{r}
########################################
#Evaluate Model Performance on Test Set
########################################

ggplot() + 
  geom_point(aes(x = as.vector(y_test), y = y_pred_test), color = 'black') +
  ggtitle('Comparing true and predicted values for test set') +
  xlab('True values for y') +
  ylab('Predicted values for y')

# There's a mismatch on these vectors messing with the plot. Need to fix this:
# length(y_test) = 50
# length(y_pred_test) = 55
```
