---
title: "homework4"
format: html
editor: visual
---

## Analyzing Egg Production of Caged Hens (July 2016 - Jan 2021)

### Intro

Two datasets were included at the inception of this project, which is included in the Appendix: "Cage Free Percentages" and "Egg Production."

The first dataset, Cage Free Percentages, details the percentage of cage-free hens that were part of an unindentified egg production facility over a thirteen-year period, from 2007-2021. At the beginning of 2007, over 96% of hens were kept in caged facilities for egg production, but this number decreased significantly over the next thirteen years by over 27%, accounting for only \~70% of hens that were caged at the beginning of 2021.

The second dataset, Egg Production, captured the monthly quantity of eggs that were hatched, split into two categories: hatching eggs, what could be referred to as eggs that hatch baby chicks, and table eggs, non-hatching eggs that are sold to consumers for consumption. This data is captured over a five-year time period, from 2016 - 2021.

Also captured in the latter dataset are monthly values split between caged hens vs. non-caged hens, which is further split up into whether non-caged hens were fed a natural, organic diet and laid organic eggs, or whether they were fed a modified, engineered diet and laid non-organic eggs. Though not explicitly stated, I make the assumption that caged hens were fed a modified, engineered diet to ramp up egg production, but this assumption is irrelevant because I wanted to focus on finding the linear relationship between the amount of hens in the production facility vs. the amount of table eggs that were hatched.

### Plan of Analysis: Choosing the Right Dataset & Training-Test Ratio

Since I was interested in analyzing the highest volume of egg production, I discarded the first dataset, Cage Free Production, especially since it contained a lot of missing values, and I chose the Egg Production dataset for my analysis, specifically focusing on caged hens since they made up over 75% of egg production.

In trying to find an optimal regression model that can best fit the data as well as predict egg production, I opted for an 80/20 training-test split primarily because my filtered data was limited. I then tried a 70/30 and 60/40 ratio, but the 80/20 produced the best prediction regression model.

If the same training methods were applied to the cage-free hens and the amount of eggs that they produced, it would be expected that the 80/20 would find the best model because those datasets were also limited. This analysis and point of this project showed that when in doubt and when you have a limited dataset, to include more attribute values in your training model than less values, but not too much as to over fit your model.

### Appendix

#### Load Packages

```{r}

#################
# Load packages
#################

# Required packages
if (!require(pacman))
  install.packages("pacman")

pacman::p_load(tidymodels,
               tidyverse,
               ranger,
               randomForest,
               glmnet,
               here,
               formattable,
               dlookr,
               gridExtra)

# Global ggplot theme
theme_set(theme_bw() + theme(legend.position = "top"))
```

#### Analyze Cage Free Dataset

```{r}
##################################
# Load & analyze "Cage Free" data
##################################

# Original dimensions of dataset: 96 rows x 4 columns
original_data <- read_csv(here('./data/cage-free-percentages.csv'), col_types = cols(observed_month = col_date(),
  percent_hens = col_double(),
  percent_eggs = col_double(),
  observed_month = col_date()
))

# Removing unncessary "source" column
cage_free <- original_data %>% select(-source)

# Timespan of data: Over 13 yrs worth of data
cage_free |> summary()

# Presentable view of dataset
cage_free |> formattable()

#cage_free |> 
#  diagnose() |>
#  formattable()

#Summary: Data is limited; numbers are percentages and missing values.
```

#### Analyze "Egg Production" Dataset

```{r}
######################################
# Load & analyze "Egg Production" data
######################################

# Original dimensions of dataset: 220 rows x 6 columns
original_egg_prod_data <- read_csv(here('./data/egg-production.csv'), col_types = cols(observed_month = col_date(),
  prod_type = col_factor(),
  prod_process = col_factor(),
  n_hens = col_double(),
  n_eggs = col_double()
))

# Removing unncessary "source" column
egg_prod <- original_egg_prod_data %>% select(-source)

# Timespan of data: Over 13 yrs worth of data
egg_prod |> summary()

egg_prod |> 
  diagnose() |>
  formattable()

# Presentable view of dataset
egg_prod |> 
  filter() |>
  formattable()

# "Hatching eggs" will impede production, so filtering for "table eggs" 
filtered_eggs_prod <- egg_prod |>
  filter(prod_type %in% "table eggs") |>
  filter(prod_process %in% "all")

filtered_eggs_prod |>
  diagnose() |>
  formattable()

# "Table eggs" dataset from 7/31/16 - 1/31/21
filtered_eggs_prod |> formattable()
```

#### Creating Original Dataset & Calculation of Original Linear Function

```{r}
################################################################
# Calc. of Lin. Funct.
################################################################

# Create short-hand notaion of X- & y-axis
X <- filtered_eggs_prod$n_hens
y <- filtered_eggs_prod$n_eggs

data <- tibble(X = X, y = y)

# Set Linear Regression Model
lin_reg_spec <- linear_reg() |>
  set_engine("lm")

# Now find the linear function according to the egg_prod data
lin_reg_fit <- lin_reg_spec |>
  fit(y ~ X, data = data)
lin_reg_fit # Original function: y=(−1.401×10^9 + 28.79X)

y_original <- (-1.401*10^9) + 28.79*X
```

#### Scatter Plot of Original Data & Plot Including Original Function

This plot is interesting because there's been a 13% increase in the number of hens at this production facility, correlating to a 13% increase in the number of eggs produced each month which turns out to be \~2.39 eggs per hen. Traditionally, hens have only been able to lay one egg per day, so this graph tells us that these caged hens could be fed with food that has been genetically modified to include additional hormones.

```{r}

# Create Scatter Plot of Data
plot(X, y,
     xlab = "No. of Hens", 
     ylab = "No. of Eggs",
     main = "Scatter Plot of 'Table Egg' Production (July 2016 - Jan 2021)")

# Plot of Linear Function for Data
ggplot() +
  geom_point(aes(x=X, y=y), color="black") +
  geom_line(aes(x=X, y=y_original), color="blue", linewidth=1) +
  ggtitle('Plot of Original Function: y = -1.401*10^9 + 28.79(X)') +
  xlab('X = No. of Hens') +
  ylab('y = No. of Eggs')
```

### Create My Training & Testing Datasets

```{r}
##################################
# Create my Train & Test Datasets
##################################

# For reproducibility
set.seed(123)

# Start by creating a 1/3 split
split_obj <- initial_split(data, prop = 0.8)

# Extract train and test data
train_data <- training(split_obj)
test_data <- testing(split_obj)

# Extract X_train, X_test, y_train, y_test
X_train <- train_data$X
y_train <- train_data$y

X_test <- test_data$X
y_test <- test_data$y
```

```{r}

######################################
# Fit Regression Model to Training Set
######################################

# Create a linear regression model specification
lin_reg_spec <- linear_reg() |>
  set_engine("lm")

# Fit the model to the training data

lin_reg_fit <- lin_reg_spec |> 
  fit(y ~ X, data = train_data)
```

```{r}
##########################################
# Apply our trained model to the test set
##########################################

y_pred_test <- predict(lin_reg_fit, new_data = test_data) |> 
  pull(.pred)

y_pred_test
```

```{r}
########################################
#Evaluate Model Performance on Test Set
########################################

ggplot() + 
  geom_point(aes(x = as.vector(y_test), y = y_pred_test), color = 'black') +
  ggtitle('Comparing true and predicted values for test set') +
  xlab('True values for y') +
  ylab('Predicted values for y')

# There's a mismatch on these vectors messing with the plot. Need to fix this:
# length(y_test) = 50
# length(y_pred_test) = 55
```
